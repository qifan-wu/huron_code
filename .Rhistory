xlab("cluster")
ggplot(total, aes(x=as.factor(cluster), y=TP)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cluster")
data_melt <- melt(total, id.vars = 'cluster')
parameters_to_plot <- c("TP", "TSS", "eCol")
data_melt_filtered <- subset(data_melt, variable %in% parameters_to_plot)
plots <- lapply(parameters_to_plot, function(param) {
ggplot(subset(data_melt_filtered, variable == param), aes(x = as.factor(cluster), y = value)) +
geom_boxplot(fill = "slateblue", alpha = 0.2) +
xlab("cluster") +
labs(title = param)
})
grid.arrange(grobs = plots, ncol = 3)
data_melt <- melt(total, id.vars = 'cluster')
parameters_to_plot <- c("TP", "TSS", "eCol")
data_melt_filtered <- subset(data_melt, variable %in% parameters_to_plot)
View(data_melt_filtered)
parameters_to_plot <- c("TP", "TSS", "eCol")
data_melt_filtered <- subset(total, variable %in% parameters_to_plot)
parameters_to_plot <- c("TP", "TSS", "eCol")
total_filtered<- total[, c("Site_ID", "cluster")]
View(total_filtered)
parameters_to_plot <- c("TP", "TSS", "eCol")
total_filtered<- total[, c("Site_ID", "cluster") + parameters_to_plot]
parameters_to_plot <- c("TP", "TSS", "eCol")
total_filtered<- total[, c("Site_ID", "cluster", parameters_to_plot)]
View(total_filtered)
parameters_to_plot <- c("TP", "TSS", "eCol")
total_filtered<- total[, c("cluster", parameters_to_plot)]
ggplot(total_filtered, aes(x = as.factor(cluster), y = value)) +
geom_boxplot(fill = "slateblue", alpha = 0.2) +
xlab("Cluster") +
facet_wrap(~ variable, scales = "free_y") +
theme_bw()
ggplot(total_filtered, aes(x = as.factor(cluster), y = value)) +
geom_boxplot(fill = "slateblue", alpha = 0.2) +
xlab("Cluster") +
facet_wrap(~ variable, scales = "free_y") +
theme_bw()
df_long <- total_filtered %>%
pivot_longer(cols = c("TP", "TSS", "eCol") , names_to = "variable", values_to = "value")
ggplot(df_long, aes(x = cluster, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free_y") +
labs(x = "Cluster", y = "Value", title = "Boxplots of tp, tss, ecol by Cluster") +
theme_minimal()
df_long <- total_filtered %>%
pivot_longer(cols = c("TP", "TSS", "eCol") , names_to = "variable", values_to = "value")
ggplot(total_filtered, aes(x = cluster, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free_y") +
labs(x = "Cluster", y = "Value", title = "Boxplots of tp, tss, ecol by Cluster") +
theme_minimal()
melted<- melt(comp.total[, c("cluster", parameters_to_plot)],id.vars="cluster")
library(reshape2)
melted<- melt(comp.total_filtered,id.vars="cluster")
library(reshape2)
melted<- melt(total_filtered,id.vars="cluster")
ggplot(melted, aes(x = cluster, y = value)) +
geom_boxplot()+facet_wrap(~variable)
library(ggplot2)
library(gridExtra)
test <- ggplot(comp.df, aes(x = cluster, y = TP)) +
geom_boxplot() + theme_bw()
library(ggplot2)
library(gridExtra)
test <- ggplot(total, aes(x = cluster, y = TP)) +
geom_boxplot() + theme_bw()
testb <- ggplot(total, aes(x = cluster, y = TSS)) +
geom_boxplot() + theme_bw()
testc <- ggplot(total, aes(x = cluster, y = eCol)) +
geom_boxplot() + theme_bw()
grid.arrange(test, testb, testc, nrow=1)
library(ggplot2)
library(gridExtra)
test <- ggplot(total, aes(x = as.factor(cluster), y = TP)) +
geom_boxplot() + theme_bw()
testb <- ggplot(total, aes(x = as.factor(cluster), y = TSS)) +
geom_boxplot() + theme_bw()
testc <- ggplot(total, aes(x = as.factor(cluster), y = eCol)) +
geom_boxplot() + theme_bw()
grid.arrange(test, testb, testc, nrow=1)
variables <- c("TP", "TSS", "eCol")
# Initialize an empty list to store the plots
plots <- list()
# Loop through each variable and create a boxplot
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "Cluster", y = var, title = paste("Boxplot of", var, "by Cluster"))
plots[[var]] <- p
}
variables <- c("TP", "TSS", "eCol")
# Initialize an empty list to store the plots
plots <- list()
# Loop through each variable and create a boxplot
for (var in variables) {
p <- ggplot(total, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "Cluster", y = var, title = paste("Boxplot of", var, "by Cluster"))
plots[[var]] <- p
}
# Arrange the plots in a single row
do.call(grid.arrange, c(plots, nrow = 1))
variables <- c("TP", "TSS", "eCol")
library(ggplot2)
library(gridExtra)
create_boxplots <- function(df, variables, nrow) {
plots <- list()
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "Cluster", y = var, title = paste("Boxplot of", var, "by Cluster"))
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, nrow = nrow))
}
create_boxplots(total, variables, 1)
create_boxplots(total, c('RoadDensity',
'LaneDensity', 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity',
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity'), 3)
create_boxplots(total, c('RoadDensity',
'LaneDensity', 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity',
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity', 'ParcelCtDensity'), 3)
create_boxplots(total, c('ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity'), 5)
create_boxplots(total, c('ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity'), 4)
library(ggplot2)
library(gridExtra)
create_boxplots <- function(df, variables, nrow) {
plots <- list()
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "Cluster", y = var, title = paste("Boxplot of", var))
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, nrow = nrow))
}
variables <- c("TP", "TSS", "eCol")
create_boxplots(total, variables, 1)
library(ggplot2)
library(gridExtra)
create_boxplots <- function(df, variables, nrow) {
plots <- list()
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "cluster", y = var, title = paste(var, "by Cluster"))
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, nrow = nrow))
}
variables <- c("TP", "TSS", "eCol")
create_boxplots(total, variables, 1)
create_boxplots(total, c('RoadDensity',
'LaneDensity', 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity',
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity', 'ParcelCtDensity'), 3)
create_boxplots(total, c('ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity'), 3)
create_boxplots(total, c('tmean', 'ppt', 'ppt_rx1'), 1)
create_boxplots(total, c('SoilBPercent', 'SoilCPercent', 'SoilDPercent', 'SoilDepth', 'Slope'), 2)
cluster_num = 4
vis_clusters <- function(df, cluster_num) {
set.seed(31)
k <- kmeans(df, centers = cluster_num, nstart = 25)
mycluster <- fviz_cluster(k, data = df)
mycluster + theme(axis.line = element_line(colour="gray"),
panel.grid.major=element_line(colour="gray"),
panel.grid.minor=element_line(colour="gray"),
panel.background = element_blank())
}
vis_clusters(df, 4)
write_clusters <- function(df, cluster_num) {
set.seed(31)
km_res <- kmeans(df, cluster_num, nstart = 25)
return(km_res$cluster)
}
df_cluster <- df_org
df_cluster$cluster <- write_clusters(df, cluster_num)
df_cluster <- df_cluster[, c("Site_ID", "cluster")]
write.csv(df_cluster, "../data/processed/intermediate/clusters.csv")
df_all <- read_csv("../data/processed/intermediate/all_params.csv")
total <- merge(df_all, df_clusterid, by=c("Site_ID"))
library(ggplot2)
library(gridExtra)
create_boxplots <- function(df, variables, nrow) {
plots <- list()
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "cluster", y = var, title = paste(var, "by Cluster"))
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, nrow = nrow))
}
variables <- c("TP", "TSS", "eCol")
create_boxplots(total, variables, 1)
df_all <- read_csv("../data/processed/intermediate/all_params.csv")
total <- merge(df_all, df_clusterid, by=c("Site_ID"))
View(total)
vis_gen_clusters <- function(df) {
k2 <- kmeans(df, centers = 2, nstart = 25)
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
}
vis_gen_clusters(df)
cluster_num = 4
vis_clusters <- function(df, cluster_num) {
set.seed(31)
k <- kmeans(df, centers = cluster_num, nstart = 25)
mycluster <- fviz_cluster(k, data = df)
mycluster + theme(axis.line = element_line(colour="gray"),
panel.grid.major=element_line(colour="gray"),
panel.grid.minor=element_line(colour="gray"),
panel.background = element_blank())
}
vis_clusters(df, 4)
write_clusters <- function(df, cluster_num) {
set.seed(31)
km_res <- kmeans(df, cluster_num, nstart = 25)
return(km_res$cluster)
}
df_cluster <- df_org
df_cluster$cluster <- write_clusters(df, cluster_num)
df_cluster <- df_cluster[, c("Site_ID", "cluster")]
View(df_cluster)
write.csv(df_cluster, "../data/processed/intermediate/clusters.csv")
df_all <- read_csv("../data/processed/intermediate/all_params.csv")
total <- merge(df_all, df_clusterid, by=c("Site_ID"))
library(ggplot2)
library(gridExtra)
create_boxplots <- function(df, variables, nrow) {
plots <- list()
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "cluster", y = var, title = paste(var, "by Cluster"))
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, nrow = nrow))
}
variables <- c("TP", "TSS", "eCol")
create_boxplots(total, variables, 1)
View(total)
df_all <- read_csv("../data/processed/intermediate/all_params.csv")
total <- merge(df_all, df_cluster, by=c("Site_ID"))
library(ggplot2)
library(gridExtra)
create_boxplots <- function(df, variables, nrow) {
plots <- list()
for (var in variables) {
p <- ggplot(df, aes_string(x = "as.factor(cluster)", y = var)) +
geom_boxplot() + theme_bw() +
labs(x = "cluster", y = var, title = paste(var, "by Cluster"))
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, nrow = nrow))
}
variables <- c("TP", "TSS", "eCol")
create_boxplots(total, variables, 1)
create_boxplots(total, c('RoadDensity',
'LaneDensity', 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity',
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity', 'ParcelCtDensity'), 3)
create_boxplots(total, c('ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity'), 3)
create_boxplots(total, c('tmean', 'ppt', 'ppt_rx1'), 1)
create_boxplots(total, c('SoilBPercent', 'SoilCPercent', 'SoilDPercent', 'SoilDepth', 'Slope'), 2)
R.version
R.version
library(iRF)
library(tidyverse)
sessionInfo()
library(tidyverse)
library(dplyr)
library(knockoff)
#set working directory
setwd('/Users/qifanwu/Documents/research/huron/code')
# read dataset
df <- read.csv("../data/processed/WQ_BE_CLM_By_Month.csv")
basic_vars <- c('Site_ID', 'year', 'month')
water_quality_vars <- c('Cond', 'DO', 'Discharge', 'TP', 'TSS','eCol')
# select variables
variables <- c('RoadDensity', 'LaneDensity',
# 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity', # delete road pavement variables
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity', 'ParcelCtDensity',
'ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity', 'SoilBPercent', 'SoilCPercent',
'SoilDPercent', 'SoilDepth', 'Slope')
df <- df[,c(basic_vars, water_quality_vars, variables)]
# setup variables and response
pos_start <- which(names(df) == 'RoadDensity')
pos_cols <- seq.int(pos_start, ncol(df))
# normalize variables
for (i in (pos_start:max(pos_cols))){
df[i] <- scale(df[i]) #(df[i] - mean(df[i])) / sd(df[i])
}
# ==== RUN START HERE FOR DIFFERENT WATER QUALITY INDICATORS ===
# variable matrix
X_df <- as.matrix(df[,pos_cols])
library(tidyverse)
library(dplyr)
library(knockoff)
#set working directory
setwd('/Users/qifanwu/Documents/research/huron/code')
# read dataset
df <- read.csv("../data/processed/WQ_BE_CLM_By_Month.csv")
basic_vars <- c('Site_ID', 'year', 'month')
water_quality_vars <- c('Cond', 'DO', 'Discharge', 'TP', 'TSS','eCol')
# select variables
variables <- c('RoadDensity', 'LaneDensity',
# 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity', # delete road pavement variables
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity', 'ParcelCtDensity',
'ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity', 'SoilBPercent', 'SoilCPercent',
'SoilDPercent', 'SoilDepth', 'Slope')
df <- df[,c(basic_vars, water_quality_vars, variables)]
# setup variables and response
pos_start <- which(names(df) == 'RoadDensity')
pos_cols <- seq.int(pos_start, ncol(df))
# normalize variables
for (i in (pos_start:max(pos_cols))){
df[i] <- scale(df[i]) #(df[i] - mean(df[i])) / sd(df[i])
}
# ==== RUN START HERE FOR DIFFERENT WATER QUALITY INDICATORS ===
# variable matrix
X_df <- as.matrix(df[,pos_cols])
# response dataframe
dependent <- 'Cond' # dependent variable: 'TP', 'TSS','eCol', 'Cond', 'DO', 'Discharge'
Y_df <- df[,c(dependent)]
Y_df <- as.data.frame(Y_df)
# making a column all positive by adding a constant
min_value <- min(Y_df[1], na.rm = TRUE)
if (min_value <= 0) {
Y_df[1] <- Y_df[1] + abs(min_value) + 0.0001
}
# drop the rows where Y is na
combined_df <- cbind(Y_df, X_df)
clean_combined_df <- na.omit(combined_df)
Y_df <- clean_combined_df[, 1, drop = FALSE]
X_df <- clean_combined_df[, -1]
# setup selection function
knockoff_ <- function (X, y, q) {
# Log-transform the drug resistance measurements.
y <- log(y)
fdr <- q
# Run the knockoff filter.
result = knockoff.filter(X, y, fdr=fdr)
# oudfut result
list(result)
}
# a function for extracting variable names and lasso importance
knockoff_extraction <- function(result){
# names and importances of selections
selected_variable <- names(result[["Y_df"]][[1]][["selected"]])
variable_importance <- result[["Y_df"]][[1]][["statistic"]]
lasso_importance <- c()
for (i in (1:length(selected_variable))){
index <- result[["Y_df"]][[1]][["selected"]][[i]]
lasso_importance <- c(lasso_importance, variable_importance[index])
}
# return variable names and lasso importances
list(selected_variable, lasso_importance)
}
####### MANUALLY TEST FDR ###########
set.seed(123)
loop_time <- 500
fdr <- 0.2
res_list <- list() ##
variables_list <- c()
for (j in (1:loop_time)){
print(paste("Running", j, "/", loop_time))
results <- lapply(Y_df, function(y) knockoff_(X_df, y, fdr))
if(length(results[["Y_df"]][[1]][["selected"]]) > 0){
df_result <- knockoff_extraction(results)
variables_list <- c(variables_list, df_result[[1]])
res_list <- c(res_list, df_result) ##
}
else{
variables_list <- variables_list
}
}
selected_vars <- table(variables_list)
selected_vars_df <- as.data.frame(selected_vars)
selected_vars_df <- selected_vars_df[order(selected_vars_df$Freq, decreasing = TRUE), ]
write.csv(selected_vars_df, paste0("../data/processed/intermediate/knockoff/selected_vars_",dependent,".csv"), row.names = FALSE)
write.csv(selected_vars_df, paste0("../data/output/knockoff/selected_vars_",dependent,".csv"), row.names = FALSE)
pwd
whereami
write.csv(selected_vars_df, paste0("../output/knockoff/selected_vars_",dependent,".csv"), row.names = FALSE)
dependent <- 'DO' # dependent variable: 'TP', 'TSS','eCol', 'Cond', 'DO', 'Discharge'
Y_df <- df[,c(dependent)]
Y_df <- as.data.frame(Y_df)
# making a column all positive by adding a constant
min_value <- min(Y_df[1], na.rm = TRUE)
if (min_value <= 0) {
Y_df[1] <- Y_df[1] + abs(min_value) + 0.0001
}
# drop the rows where Y is na
combined_df <- cbind(Y_df, X_df)
setwd('/Users/qifanwu/Documents/research/huron/code')
# read dataset
df <- read.csv("../data/processed/WQ_BE_CLM_By_Month.csv")
basic_vars <- c('Site_ID', 'year', 'month')
water_quality_vars <- c('Cond', 'DO', 'Discharge', 'TP', 'TSS','eCol')
# select variables
variables <- c('RoadDensity', 'LaneDensity',
# 'GravelDensity', 'AsphaltDensity', 'ConcreteDensity', # delete road pavement variables
'StateRdDensity', 'CountyRdDensity', 'CityRdDensity', 'ParcelCtDensity',
'ParcelAvgArea', 'AgPercent', 'CommercialPercent', 'GreenPercent',
'IndustryPercent', 'ServicePercent', 'ResidentialPercent',
'VaccantPercent', 'OpenDevPercent', 'LowDevPercent', 'MedDevPercent',
'HighDevPercent', 'MedianFloors', 'MedianBuiltYr', 'RangeBuiltYr',
'FootprintDensity', 'UnitDensity', 'SoilBPercent', 'SoilCPercent',
'SoilDPercent', 'SoilDepth', 'Slope')
df <- df[,c(basic_vars, water_quality_vars, variables)]
# setup variables and response
pos_start <- which(names(df) == 'RoadDensity')
pos_cols <- seq.int(pos_start, ncol(df))
# normalize variables
for (i in (pos_start:max(pos_cols))){
df[i] <- scale(df[i]) #(df[i] - mean(df[i])) / sd(df[i])
}
# ==== RUN START HERE FOR DIFFERENT WATER QUALITY INDICATORS ===
# variable matrix
X_df <- as.matrix(df[,pos_cols])
# response dataframe
dependent <- 'DO' # dependent variable: 'TP', 'TSS','eCol', 'Cond', 'DO', 'Discharge'
Y_df <- df[,c(dependent)]
Y_df <- as.data.frame(Y_df)
# making a column all positive by adding a constant
min_value <- min(Y_df[1], na.rm = TRUE)
if (min_value <= 0) {
Y_df[1] <- Y_df[1] + abs(min_value) + 0.0001
}
# drop the rows where Y is na
combined_df <- cbind(Y_df, X_df)
clean_combined_df <- na.omit(combined_df)
Y_df <- clean_combined_df[, 1, drop = FALSE]
X_df <- clean_combined_df[, -1]
# setup selection function
knockoff_ <- function (X, y, q) {
# Log-transform the drug resistance measurements.
y <- log(y)
fdr <- q
# Run the knockoff filter.
result = knockoff.filter(X, y, fdr=fdr)
# oudfut result
list(result)
}
# a function for extracting variable names and lasso importance
knockoff_extraction <- function(result){
# names and importances of selections
selected_variable <- names(result[["Y_df"]][[1]][["selected"]])
variable_importance <- result[["Y_df"]][[1]][["statistic"]]
lasso_importance <- c()
for (i in (1:length(selected_variable))){
index <- result[["Y_df"]][[1]][["selected"]][[i]]
lasso_importance <- c(lasso_importance, variable_importance[index])
}
# return variable names and lasso importances
list(selected_variable, lasso_importance)
}
####### MANUALLY TEST FDR ###########
set.seed(123)
loop_time <- 500
fdr <- 0.2
res_list <- list() ##
variables_list <- c()
for (j in (1:loop_time)){
print(paste("Running", j, "/", loop_time))
results <- lapply(Y_df, function(y) knockoff_(X_df, y, fdr))
if(length(results[["Y_df"]][[1]][["selected"]]) > 0){
df_result <- knockoff_extraction(results)
variables_list <- c(variables_list, df_result[[1]])
res_list <- c(res_list, df_result) ##
}
else{
variables_list <- variables_list
}
}
selected_vars <- table(variables_list)
selected_vars_df <- as.data.frame(selected_vars)
selected_vars_df <- selected_vars_df[order(selected_vars_df$Freq, decreasing = TRUE), ]
write.csv(selected_vars_df, paste0("../output/knockoff/selected_vars_",dependent,".csv"), row.names = FALSE)
